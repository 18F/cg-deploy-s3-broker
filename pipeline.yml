---
jobs:
- name: test-s3-broker
  plan:
  - aggregate:
    - get: broker-src
      trigger: true
    - get: broker-config
      trigger: true
  - task: test
    file: broker-config/tasks/test.yml

- name: push-s3-broker-staging
  serial: true
  plan:
  - aggregate:
    - get: broker-src
      passed: [test-s3-broker]
      trigger: true
    - get: broker-config
      passed: [test-s3-broker]
      trigger: true
    - get: pipeline-tasks
  - task: build
    file: broker-config/tasks/build.yml
    params:
      AUTH_USERNAME: {{staging-auth-name}}
      AUTH_PASSWORD: {{staging-auth-pass}}
      AWS_REGION: {{staging-aws-region}}
      USER_PREFIX: {{staging-user-prefix}}
      POLICY_PREFIX: {{staging-policy-prefix}}
      BUCKET_PREFIX: {{staging-bucket-prefix}}
      IAM_PATH: {{staging-iam-path}}
      CF_API_URL: {{staging-cf-api-url}}
      CF_CLIENT_ID: {{staging-cf-client-id}}
      CF_CLIENT_SECRET: {{staging-cf-client-secret}}
      AWS_PARTITION: aws-us-gov
  - put: deploy-s3-broker-app-staging
    params:
      path: broker-src-built
      manifest: broker-src-built/manifest.yml
      current_app_name: s3-broker
      environment_variables:
        AWS_REGION: {{staging-aws-region}}
  - task: update-broker
    file: pipeline-tasks/register-service-broker-for-sandboxes.yml
    params:
      <<: *staging-cf-creds
      BROKER_NAME: s3-broker
      AUTH_USER: {{staging-auth-name}}
      AUTH_PASS: {{staging-auth-pass}}
      SERVICES: s3:basic-sandbox s3:basic-public-sandbox

  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy s3-broker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed s3-broker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: acceptance-tests-staging
  serial: true
  plan:
  - aggregate:
    - get: broker-src
      passed: [push-s3-broker-staging]
      trigger: true
    - get: broker-config
      passed: [push-s3-broker-staging]
      trigger: true
  - aggregate:
    - task: acceptance-tests
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *staging-cf-creds
        APP_NAME: s3-acceptance-test
        SERVICE_NAME: s3
        PLAN_NAME: basic
        SERVICE_INSTANCE_NAME: s3-acceptance-test
        IS_PUBLIC: "false"
        ENCRYPTION: &encryption |-
          {
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }
    - task: acceptance-tests-additional
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *staging-cf-creds
        APP_NAME: s3-acceptance-test-additional
        SERVICE_NAME: s3
        PLAN_NAME: basic
        SERVICE_INSTANCE_NAME: s3-acceptance-test-main
        ADDITIONAL_INSTANCE_NAME: s3-acceptance-test-additional
        ADDITIONAL_INSTANCE_DECOY_NAME: s3-acceptance-test-additional-decoy
        CF_SPACE_ADDITIONAL_DECOY: {{staging-cf-space-additional-decoy}}
        IS_PUBLIC: "false"
        ENCRYPTION: *encryption
    - task: acceptance-tests-public
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *staging-cf-creds
        APP_NAME: s3-acceptance-test-public
        SERVICE_NAME: s3
        PLAN_NAME: basic-public
        SERVICE_INSTANCE_NAME: s3-acceptance-test-public
        IS_PUBLIC: "true"
        ENCRYPTION: *encryption
    - task: acceptance-tests-public-delete
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *staging-cf-creds
        APP_NAME: s3-acceptance-test-public-delete
        SERVICE_NAME: s3
        PLAN_NAME: basic-public-sandbox
        SERVICE_INSTANCE_NAME: s3-acceptance-test-public-delete
        IS_PUBLIC: "true"
        IS_DELETE: "true"
        ENCRYPTION: *encryption
      

- name: push-s3-broker-production
  serial: true
  plan:
  - aggregate:
    - get: broker-src
      passed: [acceptance-tests-staging]
      trigger: true
    - get: broker-config
      passed: [acceptance-tests-staging]
      trigger: true
    - get: pipeline-tasks
  - task: build
    file: broker-config/tasks/build.yml
    params:
      AUTH_USERNAME: {{production-auth-name}}
      AUTH_PASSWORD: {{production-auth-pass}}
      AWS_REGION: {{production-aws-region}}
      USER_PREFIX: {{production-user-prefix}}
      POLICY_PREFIX: {{production-policy-prefix}}
      BUCKET_PREFIX: {{production-bucket-prefix}}
      IAM_PATH: {{production-iam-path}}
      CF_API_URL: {{production-cf-api-url}}
      CF_CLIENT_ID: {{production-cf-client-id}}
      CF_CLIENT_SECRET: {{production-cf-client-secret}}
      AWS_PARTITION: aws-us-gov
  - put: deploy-s3-broker-app-production
    params:
      path: broker-src-built
      manifest: broker-src-built/manifest.yml
      current_app_name: s3-broker
      environment_variables:
        AWS_REGION: {{production-aws-region}}
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *production-cf-creds
      BROKER_NAME: s3-broker
      AUTH_USER: {{production-auth-name}}
      AUTH_PASS: {{production-auth-pass}}
      SERVICES: s3
  - task: update-broker
    file: pipeline-tasks/register-service-broker-for-sandboxes.yml
    params:
      <<: *production-cf-creds
      BROKER_NAME: s3-broker
      AUTH_USER: {{production-auth-name}}
      AUTH_PASS: {{production-auth-pass}}
      SERVICES: s3:basic-sandbox s3:basic-public-sandbox
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy s3-broker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed s3-broker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: acceptance-tests-production
  serial: true
  plan:
  - aggregate:
    - get: broker-src
      passed: [push-s3-broker-production]
      trigger: true
    - get: broker-config
      passed: [push-s3-broker-production]
      trigger: true
  - aggregate:
    - task: acceptance-tests
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *production-cf-creds
        APP_NAME: s3-acceptance-test
        SERVICE_NAME: s3
        PLAN_NAME: basic
        SERVICE_INSTANCE_NAME: s3-acceptance-test
        IS_PUBLIC: "false"
        ENCRYPTION: *encryption
    - task: acceptance-tests-additional
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *production-cf-creds
        APP_NAME: s3-acceptance-test-additional
        SERVICE_NAME: s3
        PLAN_NAME: basic
        SERVICE_INSTANCE_NAME: s3-acceptance-test-main
        ADDITIONAL_INSTANCE_NAME: s3-acceptance-test-additional
        ADDITIONAL_INSTANCE_DECOY_NAME: s3-acceptance-test-additional-decoy
        CF_SPACE_ADDITIONAL_DECOY: {{production-cf-space-additional-decoy}}
        IS_PUBLIC: "false"
        ENCRYPTION: *encryption
    - task: acceptance-tests-public
      file: broker-config/tasks/acceptance-tests.yml
      params:
        <<: *production-cf-creds
        APP_NAME: s3-acceptance-test-public
        SERVICE_NAME: s3
        PLAN_NAME: basic-public
        SERVICE_INSTANCE_NAME: s3-acceptance-test-public
        IS_PUBLIC: "true"
        ENCRYPTION: *encryption

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:
- name: broker-src
  type: git
  source:
    uri: {{s3-broker-app-url}}
    branch: {{s3-broker-app-branch}}

- name: broker-config
  type: git
  source:
    uri: {{s3-broker-config-url}}
    branch: {{s3-broker-config-branch}}

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: deploy-s3-broker-app-staging
  type: cf
  source:
    api: {{staging-cf-api-url}}
    username: {{staging-cf-username}}
    password: {{staging-cf-password}}
    organization: {{staging-cf-organization}}
    space: {{staging-cf-space}}
    skip_cert_check: false

- name: deploy-s3-broker-app-production
  type: cf
  source:
    api: {{production-cf-api-url}}
    username: {{production-cf-username}}
    password: {{production-cf-password}}
    organization: {{production-cf-organization}}
    space: {{production-cf-space}}
    skip_cert_check: false

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

staging-cf-creds: &staging-cf-creds
  CF_API_URL: {{staging-cf-api-url}}
  CF_USERNAME: {{staging-cf-username}}
  CF_PASSWORD: {{staging-cf-password}}
  CF_ORGANIZATION: {{staging-cf-organization}}
  CF_SPACE: {{staging-cf-space}}

production-cf-creds: &production-cf-creds
  CF_API_URL: {{production-cf-api-url}}
  CF_USERNAME: {{production-cf-username}}
  CF_PASSWORD: {{production-cf-password}}
  CF_ORGANIZATION: {{production-cf-organization}}
  CF_SPACE: {{production-cf-space}}
